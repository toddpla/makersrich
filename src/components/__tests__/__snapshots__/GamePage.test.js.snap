// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`gamepage renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GamePage
    egg={
      Object {
        "left": 0,
        "top": 0,
      }
    }
    map={
      Object {
        "impassable": Array [
          Object {
            "x": 15,
            "y": 30,
          },
        ],
        "portals": Array [
          Object {
            "name": "Shop",
            "x": 15,
            "y": 30,
          },
        ],
        "signs": Array [
          Object {
            "properties": Array [
              Object {
                "value": "This is a sign",
              },
            ],
            "x": 15,
            "y": 14,
          },
        ],
      }
    }
    opponents={Array []}
    player="player"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Map />,
        <Connect(Player)
          checkSign={[Function]}
          closeModal={[Function]}
          handleMovement={[Function]}
          handlePopupInstructions={[Function]}
          handlePopupInventory={[Function]}
          handlePopupMessage={[Function]}
          notOnMap={false}
          onFocus={false}
          player="player"
        />,
        Array [],
        <Connect(Egg) />,
        <div>
          <ControlPanel
            handleOffFocus={[Function]}
            handleOnFocus={[Function]}
            handlePopupLeaderboard={[Function]}
          />
        </div>,
        <Modal
          ariaHideApp={false}
          bodyOpenClassName="ReactModal__Body--open"
          closeTimeoutMS={0}
          isOpen={false}
          onRequestClose={[Function]}
          parentSelector={[Function]}
          portalClassName="ReactModalPortal"
          role="dialog"
          shouldCloseOnEsc={true}
          shouldCloseOnOverlayClick={true}
          shouldFocusAfterRender={true}
          shouldReturnFocusAfterClose={true}
          style={
            Object {
              "content": Object {
                "background": "none",
                "border": "none",
                "bottom": "auto",
                "left": "50%",
                "marginRight": "-50%",
                "right": "auto",
                "top": "50%",
                "transform": "translate(-50%, -50%)",
              },
            }
          }
        >
          undefined
          <div
            className="modal-button"
            onClick={[Function]}
          />
        </Modal>,
      ],
      "id": "game-wrapper",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "checkSign": [Function],
          "closeModal": [Function],
          "handleMovement": [Function],
          "handlePopupInstructions": [Function],
          "handlePopupInventory": [Function],
          "handlePopupMessage": [Function],
          "handlePopupRPS": undefined,
          "notOnMap": false,
          "onFocus": false,
          "player": "player",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <ControlPanel
            handleOffFocus={[Function]}
            handleOnFocus={[Function]}
            handlePopupLeaderboard={[Function]}
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "handleOffFocus": [Function],
            "handleOnFocus": [Function],
            "handlePopupLeaderboard": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "ariaHideApp": false,
          "bodyOpenClassName": "ReactModal__Body--open",
          "children": Array [
            "undefined",
            <div
              className="modal-button"
              onClick={[Function]}
            />,
          ],
          "closeTimeoutMS": 0,
          "contentLabel": undefined,
          "isOpen": false,
          "onAfterOpen": undefined,
          "onRequestClose": [Function],
          "parentSelector": [Function],
          "portalClassName": "ReactModalPortal",
          "role": "dialog",
          "shouldCloseOnEsc": true,
          "shouldCloseOnOverlayClick": true,
          "shouldFocusAfterRender": true,
          "shouldReturnFocusAfterClose": true,
          "style": Object {
            "content": Object {
              "background": "none",
              "border": "none",
              "bottom": "auto",
              "left": "50%",
              "marginRight": "-50%",
              "right": "auto",
              "top": "50%",
              "transform": "translate(-50%, -50%)",
            },
          },
        },
        "ref": null,
        "rendered": Array [
          "undefined",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "modal-button",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": "div",
          },
        ],
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Map />,
          <Connect(Player)
            checkSign={[Function]}
            closeModal={[Function]}
            handleMovement={[Function]}
            handlePopupInstructions={[Function]}
            handlePopupInventory={[Function]}
            handlePopupMessage={[Function]}
            notOnMap={false}
            onFocus={false}
            player="player"
          />,
          Array [],
          <Connect(Egg) />,
          <div>
            <ControlPanel
              handleOffFocus={[Function]}
              handleOnFocus={[Function]}
              handlePopupLeaderboard={[Function]}
            />
          </div>,
          <Modal
            ariaHideApp={false}
            bodyOpenClassName="ReactModal__Body--open"
            closeTimeoutMS={0}
            isOpen={false}
            onRequestClose={[Function]}
            parentSelector={[Function]}
            portalClassName="ReactModalPortal"
            role="dialog"
            shouldCloseOnEsc={true}
            shouldCloseOnOverlayClick={true}
            shouldFocusAfterRender={true}
            shouldReturnFocusAfterClose={true}
            style={
              Object {
                "content": Object {
                  "background": "none",
                  "border": "none",
                  "bottom": "auto",
                  "left": "50%",
                  "marginRight": "-50%",
                  "right": "auto",
                  "top": "50%",
                  "transform": "translate(-50%, -50%)",
                },
              }
            }
          >
            undefined
            <div
              className="modal-button"
              onClick={[Function]}
            />
          </Modal>,
        ],
        "id": "game-wrapper",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "checkSign": [Function],
            "closeModal": [Function],
            "handleMovement": [Function],
            "handlePopupInstructions": [Function],
            "handlePopupInventory": [Function],
            "handlePopupMessage": [Function],
            "handlePopupRPS": undefined,
            "notOnMap": false,
            "onFocus": false,
            "player": "player",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <ControlPanel
              handleOffFocus={[Function]}
              handleOnFocus={[Function]}
              handlePopupLeaderboard={[Function]}
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "handleOffFocus": [Function],
              "handleOnFocus": [Function],
              "handlePopupLeaderboard": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "ariaHideApp": false,
            "bodyOpenClassName": "ReactModal__Body--open",
            "children": Array [
              "undefined",
              <div
                className="modal-button"
                onClick={[Function]}
              />,
            ],
            "closeTimeoutMS": 0,
            "contentLabel": undefined,
            "isOpen": false,
            "onAfterOpen": undefined,
            "onRequestClose": [Function],
            "parentSelector": [Function],
            "portalClassName": "ReactModalPortal",
            "role": "dialog",
            "shouldCloseOnEsc": true,
            "shouldCloseOnOverlayClick": true,
            "shouldFocusAfterRender": true,
            "shouldReturnFocusAfterClose": true,
            "style": Object {
              "content": Object {
                "background": "none",
                "border": "none",
                "bottom": "auto",
                "left": "50%",
                "marginRight": "-50%",
                "right": "auto",
                "top": "50%",
                "transform": "translate(-50%, -50%)",
              },
            },
          },
          "ref": null,
          "rendered": Array [
            "undefined",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "modal-button",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": "div",
            },
          ],
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
