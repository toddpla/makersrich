// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Quiz it renders Quiz 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Quiz
    auth={
      Object {
        "cash": 200,
        "sessionQuestions": Array [],
        "uid": "123",
      }
    }
    clearQuiz={[MockFunction]}
    quiz={
      Object {
        "answers": Array [
          "one",
          "two",
          "three",
          "four",
        ],
        "correctAnswer": "1",
        "id": 8,
        "question": "What comes after one?",
      }
    }
    startDebitPlayer={[MockFunction]}
    startGetQuestion={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    startSendResult={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1>
          Welcome to the quiz!
        </h1>,
        <div
          id="quiz"
        >
          <Question
            question="What comes after one?"
          />
          <Answer
            answer="one"
            correct={false}
            handleClick={[Function]}
            id={0}
          />
          <Answer
            answer="two"
            correct={true}
            handleClick={[Function]}
            id={1}
          />
          <Answer
            answer="three"
            correct={false}
            handleClick={[Function]}
            id={2}
          />
          <Answer
            answer="four"
            correct={false}
            handleClick={[Function]}
            id={3}
          />
        </div>,
      ],
      "id": "quiz-container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Welcome to the quiz!",
        },
        "ref": null,
        "rendered": "Welcome to the quiz!",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Question
              question="What comes after one?"
            />,
            Array [
              <Answer
                answer="one"
                correct={false}
                handleClick={[Function]}
                id={0}
              />,
              <Answer
                answer="two"
                correct={true}
                handleClick={[Function]}
                id={1}
              />,
              <Answer
                answer="three"
                correct={false}
                handleClick={[Function]}
                id={2}
              />,
              <Answer
                answer="four"
                correct={false}
                handleClick={[Function]}
                id={3}
              />,
            ],
          ],
          "id": "quiz",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "question": "What comes after one?",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "0",
            "nodeType": "class",
            "props": Object {
              "answer": "one",
              "correct": false,
              "handleClick": [Function],
              "id": 0,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "class",
            "props": Object {
              "answer": "two",
              "correct": true,
              "handleClick": [Function],
              "id": 1,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "2",
            "nodeType": "class",
            "props": Object {
              "answer": "three",
              "correct": false,
              "handleClick": [Function],
              "id": 2,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "3",
            "nodeType": "class",
            "props": Object {
              "answer": "four",
              "correct": false,
              "handleClick": [Function],
              "id": 3,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1>
            Welcome to the quiz!
          </h1>,
          <div
            id="quiz"
          >
            <Question
              question="What comes after one?"
            />
            <Answer
              answer="one"
              correct={false}
              handleClick={[Function]}
              id={0}
            />
            <Answer
              answer="two"
              correct={true}
              handleClick={[Function]}
              id={1}
            />
            <Answer
              answer="three"
              correct={false}
              handleClick={[Function]}
              id={2}
            />
            <Answer
              answer="four"
              correct={false}
              handleClick={[Function]}
              id={3}
            />
          </div>,
        ],
        "id": "quiz-container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Welcome to the quiz!",
          },
          "ref": null,
          "rendered": "Welcome to the quiz!",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Question
                question="What comes after one?"
              />,
              Array [
                <Answer
                  answer="one"
                  correct={false}
                  handleClick={[Function]}
                  id={0}
                />,
                <Answer
                  answer="two"
                  correct={true}
                  handleClick={[Function]}
                  id={1}
                />,
                <Answer
                  answer="three"
                  correct={false}
                  handleClick={[Function]}
                  id={2}
                />,
                <Answer
                  answer="four"
                  correct={false}
                  handleClick={[Function]}
                  id={3}
                />,
              ],
            ],
            "id": "quiz",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "question": "What comes after one?",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "0",
              "nodeType": "class",
              "props": Object {
                "answer": "one",
                "correct": false,
                "handleClick": [Function],
                "id": 0,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "class",
              "props": Object {
                "answer": "two",
                "correct": true,
                "handleClick": [Function],
                "id": 1,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "2",
              "nodeType": "class",
              "props": Object {
                "answer": "three",
                "correct": false,
                "handleClick": [Function],
                "id": 2,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "3",
              "nodeType": "class",
              "props": Object {
                "answer": "four",
                "correct": false,
                "handleClick": [Function],
                "id": 3,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
