// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Battle
    player={
      Object {
        "battle": Object {
          "opponentName": "James Bond",
          "opponentUid": 1,
        },
        "cash": 0,
        "displayName": "Frankie",
        "left": 0,
        "level": 1,
        "state": "online",
        "top": 0,
        "uid": "1",
      }
    }
    startCreditPlayer={[MockFunction]}
    startDebitPlayer={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="rps"
      >
        <h5>
          Battle with 
          James Bond
        </h5>
        <h3>
          Choose your weapon
        </h3>
        <Timer
          end={"1970-01-01T00:00:05.000Z"}
          handleTimeout={[Function]}
        />
        <button
          className="rps-choice Rock"
          onClick={[Function]}
          value="Rock"
        />
         
        <br />
        <button
          className="rps-choice Paper"
          onClick={[Function]}
          value="Paper"
        />
         
        <br />
        <button
          className="rps-choice Scissors"
          onClick={[Function]}
          value="Scissors"
        />
      </div>,
      "id": "rps-battle-container",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h5>
            Battle with 
            James Bond
          </h5>,
          <h3>
            Choose your weapon
          </h3>,
          <Timer
            end={"1970-01-01T00:00:05.000Z"}
            handleTimeout={[Function]}
          />,
          <button
            className="rps-choice Rock"
            onClick={[Function]}
            value="Rock"
          />,
          " ",
          <br />,
          <button
            className="rps-choice Paper"
            onClick={[Function]}
            value="Paper"
          />,
          " ",
          <br />,
          <button
            className="rps-choice Scissors"
            onClick={[Function]}
            value="Scissors"
          />,
        ],
        "className": "rps",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Battle with ",
              "James Bond",
            ],
          },
          "ref": null,
          "rendered": Array [
            "Battle with ",
            "James Bond",
          ],
          "type": "h5",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Choose your weapon",
          },
          "ref": null,
          "rendered": "Choose your weapon",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "end": "1970-01-01T00:00:05.000Z",
            "handleTimeout": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "rps-choice Rock",
            "onClick": [Function],
            "value": "Rock",
          },
          "ref": null,
          "rendered": null,
          "type": "button",
        },
        " ",
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "rps-choice Paper",
            "onClick": [Function],
            "value": "Paper",
          },
          "ref": null,
          "rendered": null,
          "type": "button",
        },
        " ",
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "rps-choice Scissors",
            "onClick": [Function],
            "value": "Scissors",
          },
          "ref": null,
          "rendered": null,
          "type": "button",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="rps"
        >
          <h5>
            Battle with 
            James Bond
          </h5>
          <h3>
            Choose your weapon
          </h3>
          <Timer
            end={"1970-01-01T00:00:05.000Z"}
            handleTimeout={[Function]}
          />
          <button
            className="rps-choice Rock"
            onClick={[Function]}
            value="Rock"
          />
           
          <br />
          <button
            className="rps-choice Paper"
            onClick={[Function]}
            value="Paper"
          />
           
          <br />
          <button
            className="rps-choice Scissors"
            onClick={[Function]}
            value="Scissors"
          />
        </div>,
        "id": "rps-battle-container",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h5>
              Battle with 
              James Bond
            </h5>,
            <h3>
              Choose your weapon
            </h3>,
            <Timer
              end={"1970-01-01T00:00:05.000Z"}
              handleTimeout={[Function]}
            />,
            <button
              className="rps-choice Rock"
              onClick={[Function]}
              value="Rock"
            />,
            " ",
            <br />,
            <button
              className="rps-choice Paper"
              onClick={[Function]}
              value="Paper"
            />,
            " ",
            <br />,
            <button
              className="rps-choice Scissors"
              onClick={[Function]}
              value="Scissors"
            />,
          ],
          "className": "rps",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "Battle with ",
                "James Bond",
              ],
            },
            "ref": null,
            "rendered": Array [
              "Battle with ",
              "James Bond",
            ],
            "type": "h5",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Choose your weapon",
            },
            "ref": null,
            "rendered": "Choose your weapon",
            "type": "h3",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "end": "1970-01-01T00:00:05.000Z",
              "handleTimeout": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "rps-choice Rock",
              "onClick": [Function],
              "value": "Rock",
            },
            "ref": null,
            "rendered": null,
            "type": "button",
          },
          " ",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "rps-choice Paper",
              "onClick": [Function],
              "value": "Paper",
            },
            "ref": null,
            "rendered": null,
            "type": "button",
          },
          " ",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "rps-choice Scissors",
              "onClick": [Function],
              "value": "Scissors",
            },
            "ref": null,
            "rendered": null,
            "type": "button",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
